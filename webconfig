#!/usr/bin/env ruby
# -*- ruby -*-

# Copyright 2009 Burke Libbey / Chromium 53. Released under MIT License.

puts "Building configuration..."
begin
  require 'rubygems'
rescue LoadError
end
require 'yaml'

# No syntax checking whatsoever on the yaml files. You're on your own.

module Webconfig

  WEBCONFIG_PATH = File.dirname(__FILE__)
  CONFIG_PATH    = File.join(WEBCONFIG_PATH,'config')
  DEFAULTS       = YAML.load_file("#{CONFIG_PATH}/defaults.yml")
  TEMPLATES      = YAML.load_file("#{CONFIG_PATH}/templates.yml")
  DOMAINS        = YAML.load_file("#{CONFIG_PATH}/config.yml")
  # Get a list of the different servers templates.yml specifies configs for.
  # example: ["nginx", "apache"]
  SERVERS = TEMPLATES.values.map(&:keys).flatten.uniq.map{|s|s.gsub('content_for_','')}

  # Return a hash of configuration files by server. Eg. {"apache" => "<VirtualHost *>........"}
  def self.config_by_server
    output = {}
    SERVERS.each do |server|
      output.merge!({server => config_for_server(server)})
    end
    return output
  end
  
  def self.config_for_server(server)
    relevant_templates = TEMPLATES.reject{|k,v| ! v.has_key?("content_for_#{server}")}
    output = ""
    
    # Each domain of a template type that specifies configuration for this server
    relevant_domains = DOMAINS.reject do |domain, args|
      ! relevant_templates.keys.include?(args['template'])
    end

    relevant_domains.each do |domain, args|
      cfs = "content_for_#{server}"
      domaininfo = args.merge({"domain" => domain})
      output << Domain.new(domaininfo).content_for_server(server)
    end

    return output

  end

  class Domain

    def initialize(args)
      # This might be dangerous? I'm pretty sure we can trust whomever's
      # writing our vhost definitions :)
      args = DEFAULTS.merge args
      args.each do |k,v|
        instance_variable_set "@#{k}", v
      end

      # We need to wrap @location in slashes, but if it's root, that gives us
      #   // or ///, so we collapse multiple sequential slashes to a single /.
      @location = "/#{@location}/"
      @location.gsub!(/\/+/,'/')
    end

    def content_for_server(server)
      cfs = "content_for_#{server}"
      begin
       eval("return <<-\"END\"

#{Webconfig::TEMPLATES[@template][cfs]}

        END")
      rescue
        raise SyntaxError, "Invalid syntax in configuration files. Failed parsing #{domain}."
      end
    end
  end
end


if __FILE__ == $0

  config = Webconfig.config_by_server

  # Write out a file in ./gen for each server configured. 
  config.each do |k,v|
    File.open("#{Webconfig::WEBCONFIG_PATH}/gen/#{k}.gen.conf",'w') do |f|
      f.puts v
    end
  end

  puts "[success]"
  
end
